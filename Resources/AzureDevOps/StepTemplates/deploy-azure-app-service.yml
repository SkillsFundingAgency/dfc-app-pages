parameters:
  FunctionType: ''
  AzureSubscription: ''
  DfCDevopsPath: ''
  SharedResourceGroup: ''
  ApimServiceName: ''
  ApimImportScript: ''
  ApimProductId: ''
  ApimLoggerName: ''
  SpecificationPath: ''
  WebAppName: ''
  ResourceGroup: ''
  FunctionAppDomain: ''
  PackageFile: ''

steps:
- checkout: dfc-devops
  path: 's/dfc-devops/'

- task: AzureAppServiceManage@0
  displayName: 'Start Azure App Service:${{ parameters.WebAppName }}'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    Action: 'Start Azure App Service'
    WebAppName: '${{ parameters.WebAppName }}'
    SpecifySlotOrASE: true
    ResourceGroupName: '${{ parameters.ResourceGroup }}'
    Slot: staging

- task: AzureRmWebAppDeployment@4
  displayName: 'Azure App Service Deploy: ${{ parameters.WebAppName }}'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    appType: app
    WebAppName: '${{ parameters.WebAppName }}'
    Package: "${{ parameters.PackageFile }}"
    deployToSlotOrASE: true
    ResourceGroupName: '${{ parameters.ResourceGroup }}'
    SlotName: staging

- task: AzurePowerShell@4
  displayName: 'Perform smoke test'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    ScriptPath: '${{ parameters.DfCDevopsPath }}/PSCoreScripts/Invoke-SmokeTestOnWebApp.ps1'
    ScriptArguments: |
     -ResourceGroup ${{ parameters.ResourceGroup }} -AppName ${{ parameters.WebAppName }} -Path '/health/ping' -Slot staging -TimeoutInSecs 10 -Verbose
     
    FailOnStandardError: true
    azurePowerShellVersion: LatestVersion

- task: AzureAppServiceManage@0
  displayName: 'Swap Slots: ${{ parameters.WebAppName }}'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    WebAppName: '${{ parameters.WebAppName }}'
    ResourceGroupName: '${{ parameters.ResourceGroup }}'
    SourceSlot: staging

- powershell: |
    Write-Host "##vso[task.setvariable variable=FunctionAppUrl]https://${{ parameters.WebAppName }}.${{ parameters.FunctionAppDomain }}"
  displayName: "Set full hostname as variable"

- task: esfadevops.Tokenization.custom-build-task.Tokenization@0
  displayName: 'Tokenization: Transform file ${{ parameters.FunctionType }}.txt'
  inputs:
    SourcePath: '${{ parameters.SpecificationPath }}'
    TargetFileNames: '${{ parameters.FunctionType }}.txt'

- task: AzurePowerShell@4
  displayName: 'Import OpenAPI specification'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    ScriptPath: '${{ parameters.ApimImportScript }}'
    ScriptArguments: "-ApimResourceGroup '${{ parameters.SharedResourceGroup }}' -InstanceName '${{ parameters.ApimServiceName }}' -ApiName '${{ parameters.FunctionType }}' -OpenApiSpecificationFile '${{ parameters.SpecificationPath }}/${{ parameters.FunctionType }}.txt' -ApiPath 'content/${{ parameters.FunctionType }}'"
    azurePowerShellVersion: LatestVersion

- task: AzurePowerShell@4
  displayName: 'Set-ApimProductAndLogger'
  condition: ne( '${{ parameters.ApimLoggerName }}', '')
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    ScriptPath: '${{ parameters.DfCDevopsPath }}/PSScripts/Set-ApimProductAndLogger.ps1'
    ScriptArguments: '-ApimResourceGroup ${{ parameters.SharedResourceGroup }} -InstanceName ${{ parameters.ApimServiceName }} -ApiId ${{ parameters.FunctionType }} -ApiProductId ${{ parameters.ApimProductId }} -ApimLoggerName ${{ parameters.ApimLoggerName }}'
    azurePowerShellVersion: LatestVersion